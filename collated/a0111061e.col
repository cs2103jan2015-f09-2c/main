//@author: a0111061e



	/**
	 * origin: D:\Code\Planner.cpp
	 */

bool Planner::checkTaskForClashes(Task Task1, Task Task2){
	bool isClash = false;
	int numOfTask1Times, numOfTask2Times, numOfTask1Dates, numOfTask2Dates, task1StartTime, task2StartTime;

	numOfTask1Times = Task1.getNumOfTimes();
	numOfTask2Times = Task2.getNumOfTimes();
	numOfTask1Dates = Task1.getNumOfDates();
	numOfTask2Dates = Task2.getNumOfDates();

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();


	//Floating tasks and tasks with no times specified
	if ((numOfTask1Dates == 0 && numOfTask2Dates == 0 && numOfTask1Times == 0 && numOfTask2Times == 0) || (numOfTask1Times == 0 || numOfTask2Times == 0)){
		isClash = false;
	}

	//Both tasks have 2 dates and 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 2 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isTwoDatesTasksSameDates(Task1, Task2)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//Both tasks have 2 dates 2 times
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 2 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (isTwoDatesTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task1, Task2)){
				isClash = true;
			}
		}
	}

	//Both tasks have 1 date 1 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 1 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isOneDateTasksSameDates(Task1, Task2)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//Both tasks have 1 date 2 times
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 1 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (isOneDateTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task1, Task2)){
				isClash = true;
			}
		}
	}

	//Both tasks have no date 1 time
	else if (numOfTask1Dates == 0 && numOfTask2Dates == 0 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (task1StartTime == task2StartTime){
			isClash = true;
		}
	}

	//Both tasks have no date 2 times
	else if (numOfTask1Dates == 0 && numOfTask2Dates == 0 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (taskTimesOverlap(Task1, Task2)){
			isClash = true;
		}
	}

	//Task1 has 1 date 1 time and Task2 has 2 dates, 1 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 2 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isOneDateTaskbetweenTwoDateTask(Task1, Task2)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//opposite of above: Task1 has 2 dates 1 time, task2 has 1 date and 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 1 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isOneDateTaskbetweenTwoDateTask(Task2, Task1)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//Task1 has 1 date 1 time and Task2 has 2 dates, 2 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 2 && numOfTask1Times == 1 && numOfTask2Times == 2){
		isClash = isClashTaskSingleDateTimeTaskDoubleDateTime(Task1, Task2);
	}

	//opp of above: Task1 has 2 dates 2 times, task2 has 1 date 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 1 && numOfTask1Times == 2 && numOfTask2Times == 1){
		isClash = isClashTaskSingleDateTimeTaskDoubleDateTime(Task2, Task1);
	}


	//Task1 has 1 date 2 times, Task2 has 1 date 1 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 1 && numOfTask1Times == 2 && numOfTask2Times == 1){
		if (isOneDateTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task1, Task2)){
				isClash = true;
			}
		}
	}

	//Task1 has 1 date 1 times, Task2 has 1 date 2 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 1 && numOfTask1Times == 1 && numOfTask2Times == 2){
		if (isOneDateTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task2, Task1)){
				isClash = true;
			}
		}
	}

	//Task1 has 2 date 2 times, Task2 has 2 date 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 2 && numOfTask1Times == 2 && numOfTask2Times == 1){
		if (isTwoDatesTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task1, Task2)){
				isClash = true;
			}
		}
	}

	//Task1 has 2 date 1 times, Task2 has 2 date 2 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 2 && numOfTask1Times == 2 && numOfTask2Times == 1){
		if (isTwoDatesTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task2, Task1)){
				isClash = true;
			}
		}
	}

	//Task1 has 2 date 2 time, task2 has 1 date 2 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 1 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (isOneDateTaskbetweenTwoDateTask(Task2, Task1)){
			if (taskTimesOverlap(Task2, Task1)){
				isClash = true;
			}
		}
	}

	//Task1 has 1 date 2 time, task2 has 2 date 2 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 2 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (isOneDateTaskbetweenTwoDateTask(Task1, Task2)){
			if (taskTimesOverlap(Task1, Task2)){
				isClash = true;
			}
		}
	}

	return isClash;
}

	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Planner.cpp
	 */

bool Planner::isClashTaskSingleDateTimeTaskDoubleDateTime(Task Task1, Task Task2){
	bool isClash = false;

	if (isOneDateTaskbetweenTwoDateTask(Task1, Task2)){
		if (isOneTimeTaskBetweenTwoTimesTask(Task1, Task2)){
			isClash = true;
		}
	}

	return isClash;
}

	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Planner.cpp
	 */

bool Planner::isTwoDatesTasksSameDates(Task Task1, Task Task2){
	bool areEqual = false;

	if (Task1.getDateStart().year == Task2.getDateStart().year && Task1.getDateEnd().year == Task2.getDateEnd().year) {
		if (Task1.getDateStart().month == Task2.getDateStart().month && Task1.getDateEnd().month == Task2.getDateEnd().month) {
			if (Task1.getDateStart().day == Task2.getDateStart().day && Task1.getDateEnd().day == Task2.getDateEnd().day){
				areEqual = true;
			}
		}
	}
	return areEqual;
}

	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Planner.cpp
	 */

bool Planner::isOneDateTasksSameDates(Task Task1, Task Task2){
	bool dateIsEqual = false;

	if (Task1.getDateEnd().year == Task2.getDateEnd().year) {
		if (Task1.getDateEnd().month == Task2.getDateEnd().month) {
			if (Task1.getDateEnd().day == Task2.getDateEnd().day) {
				dateIsEqual = true;
			}
		}
	}

	return dateIsEqual;
}

	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Planner.cpp
	 */

bool Planner::isOneTimeTaskBetweenTwoTimesTask(Task Task1, Task Task2){
	int task1StartTime, task2StartTime, task2EndTime;
	bool isInBetween = false;

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();
	task2EndTime = Task2.getTimeEnd();

	if (task1StartTime < task2EndTime && task1StartTime >= task2StartTime){
		isInBetween = true;
	}
	return isInBetween;
}

	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Planner.cpp
	 */

bool Planner::taskTimesOverlap(Task Task1, Task Task2){
	int task1StartTime, task2StartTime, task1EndTime, task2EndTime;
	bool isOverlap = false;

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();
	task1EndTime = Task1.getTimeEnd();
	task2EndTime = Task2.getTimeEnd();

	if ((task1EndTime > task2StartTime && task1StartTime <= task2StartTime) || (task1StartTime < task2EndTime && task1EndTime >= task2EndTime)){
		isOverlap = true;
	}
	return isOverlap;
}

	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Planner.cpp
	 */

bool Planner::isOneDateTaskbetweenTwoDateTask(Task Task1, Task Task2){
	bool isInBetween = false;
	taskDate task1StartDate, task1EndDate, task2StartDate, task2EndDate;
	int task1StartTime, task1EndTime, task2StartTime, task2EndTime;

	task1StartDate = Task1.getDateStart();
	task1EndDate = Task1.getDateEnd();
	task1StartTime = Task1.getTimeStart();
	task1EndTime = Task1.getTimeEnd();

	task2StartDate = Task2.getDateStart();
	task2EndDate = Task2.getDateEnd();
	task2StartTime = Task2.getTimeStart();
	task2EndTime = Task2.getTimeEnd();

	if (task1EndDate.year <= task2EndDate.year && task1EndDate.year >= task2StartDate.year) {
		if (task1EndDate.month <= task2EndDate.month && task1EndDate.month >= task2StartDate.month) {
			if (task1EndDate.day <= task2EndDate.day && task1EndDate.day >= task2StartDate.day) {
				isInBetween = true;
			}
		}
	}

	return isInBetween;
}

	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp
	 */

bool Planner::checkTaskForClashes(Task Task1, Task Task2){
	bool isClash = false;
	int numOfTask1Times, numOfTask2Times, numOfTask1Dates, numOfTask2Dates, task1StartTime, task2StartTime;

	numOfTask1Times = Task1.getNumOfTimes();
	numOfTask2Times = Task2.getNumOfTimes();
	numOfTask1Dates = Task1.getNumOfDates();
	numOfTask2Dates = Task2.getNumOfDates();

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();


	//Floating tasks and tasks with no times specified
	if ((numOfTask1Dates == 0 && numOfTask2Dates == 0 && numOfTask1Times == 0 && numOfTask2Times == 0) || (numOfTask1Times == 0 || numOfTask2Times == 0)){
		isClash = false;
	}

	//Both tasks have 2 dates and 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 2 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isTwoDatesTasksSameDates(Task1, Task2)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//Both tasks have 2 dates 2 times
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 2 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (isTwoDatesTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task1, Task2)){
				isClash = true;
			}
		}
	}

	//Both tasks have 1 date 1 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 1 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isOneDateTasksSameDates(Task1, Task2)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//Both tasks have 1 date 2 times
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 1 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (isOneDateTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task1, Task2)){
				isClash = true;
			}
		}
	}

	//Both tasks have no date 1 time
	else if (numOfTask1Dates == 0 && numOfTask2Dates == 0 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (task1StartTime == task2StartTime){
			isClash = true;
		}
	}

	//Both tasks have no date 2 times
	else if (numOfTask1Dates == 0 && numOfTask2Dates == 0 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (taskTimesOverlap(Task1, Task2)){
			isClash = true;
		}
	}

	//Task1 has 1 date 1 time and Task2 has 2 dates, 1 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 2 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isOneDateTaskbetweenTwoDateTask(Task1, Task2)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//opposite of above: Task1 has 2 dates 1 time, task2 has 1 date and 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 1 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isOneDateTaskbetweenTwoDateTask(Task2, Task1)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//Task1 has 1 date 1 time and Task2 has 2 dates, 2 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 2 && numOfTask1Times == 1 && numOfTask2Times == 2){
		isClash = isClashTaskSingleDateTimeTaskDoubleDateTime(Task1, Task2);
	}

	//opp of above: Task1 has 2 dates 2 times, task2 has 1 date 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 1 && numOfTask1Times == 2 && numOfTask2Times == 1){
		isClash = isClashTaskSingleDateTimeTaskDoubleDateTime(Task2, Task1);
	}

	return isClash;
}

	// End of segment: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp
	 */

bool Planner::isClashTaskSingleDateTimeTaskDoubleDateTime(Task Task1, Task Task2){
	bool isClash = false;

	if (isOneDateTaskbetweenTwoDateTask(Task1, Task2)){
		if (isOneTimeTaskBetweenTwoTimesTask(Task1, Task2)){
			isClash = true;
		}
	}

	return isClash;
}

	// End of segment: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp
	 */

bool Planner::isTwoDatesTasksSameDates(Task Task1, Task Task2){
	bool areEqual = false;

	if (Task1.getDateStart().year == Task2.getDateStart().year && Task1.getDateEnd().year == Task2.getDateEnd().year) {
		if (Task1.getDateStart().month == Task2.getDateStart().month && Task1.getDateEnd().month == Task2.getDateEnd().month) {
			if (Task1.getDateStart().day == Task2.getDateStart().day && Task1.getDateEnd().day == Task2.getDateEnd().day){
				areEqual = true;
			}
		}
	}
	return areEqual;
}

	// End of segment: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp
	 */

bool Planner::isOneDateTasksSameDates(Task Task1, Task Task2){
	bool dateIsEqual = false;

	if (Task1.getDateEnd().year == Task2.getDateEnd().year) {
		if (Task1.getDateEnd().month == Task2.getDateEnd().month) {
			if (Task1.getDateEnd().day == Task2.getDateEnd().day) {
				dateIsEqual = true;
			}
		}
	}

	return dateIsEqual;
}

	// End of segment: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp
	 */

bool Planner::isOneTimeTaskBetweenTwoTimesTask(Task Task1, Task Task2){
	int task1StartTime, task2StartTime, task2EndTime;
	bool isInBetween = false;

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();
	task2EndTime = Task2.getTimeEnd();

	if (task1StartTime < task2EndTime && task1StartTime >= task2StartTime){
		isInBetween = true;
	}
	return isInBetween;
}

	// End of segment: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp
	 */

bool Planner::taskTimesOverlap(Task Task1, Task Task2){
	int task1StartTime, task2StartTime, task1EndTime, task2EndTime;
	bool isOverlap = false;

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();
	task1EndTime = Task1.getTimeEnd();
	task2EndTime = Task2.getTimeEnd();

	if ((task1EndTime > task2StartTime && task1StartTime <= task2StartTime) || (task1StartTime < task2EndTime && task1EndTime >= task2EndTime)){
		isOverlap = true;
	}
	return isOverlap;
}

	// End of segment: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp
	 */

bool Planner::isOneDateTaskbetweenTwoDateTask(Task Task1, Task Task2){
	bool isInBetween = false;
	taskDate task1StartDate, task1EndDate, task2StartDate, task2EndDate;
	int task1StartTime, task1EndTime, task2StartTime, task2EndTime;

	task1StartDate = Task1.getDateStart();
	task1EndDate = Task1.getDateEnd();
	task1StartTime = Task1.getTimeStart();
	task1EndTime = Task1.getTimeEnd();

	task2StartDate = Task2.getDateStart();
	task2EndDate = Task2.getDateEnd();
	task2StartTime = Task2.getTimeStart();
	task2EndTime = Task2.getTimeEnd();

	if (task1EndDate.year <= task2EndDate.year && task1EndDate.year >= task2StartDate.year) {
		if (task1EndDate.month <= task2EndDate.month && task1EndDate.month >= task2StartDate.month) {
			if (task1EndDate.day <= task2EndDate.day && task1EndDate.day >= task2StartDate.day) {
				isInBetween = true;
			}
		}
	}

	return isInBetween;
}

	// End of segment: D:\Code\Planner4Life (Debug)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life(Release)\Planner\Planner.cpp
	 */

bool Planner::checkTaskForClashes(Task Task1, Task Task2){
	bool isClash = false;
	int numOfTask1Times, numOfTask2Times, numOfTask1Dates, numOfTask2Dates, task1StartTime, task2StartTime;

	numOfTask1Times = Task1.getNumOfTimes();
	numOfTask2Times = Task2.getNumOfTimes();
	numOfTask1Dates = Task1.getNumOfDates();
	numOfTask2Dates = Task2.getNumOfDates();

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();


	//Floating tasks and tasks with no times specified
	if ((numOfTask1Dates == 0 && numOfTask2Dates == 0 && numOfTask1Times == 0 && numOfTask2Times == 0) || (numOfTask1Times == 0 || numOfTask2Times == 0)){
		isClash = false;
	}

	//Both tasks have 2 dates and 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 2 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isTwoDatesTasksSameDates(Task1, Task2)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//Both tasks have 2 dates 2 times
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 2 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (isTwoDatesTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task1, Task2)){
				isClash = true;
			}
		}
	}

	//Both tasks have 1 date 1 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 1 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isOneDateTasksSameDates(Task1, Task2)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//Both tasks have 1 date 2 times
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 1 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (isOneDateTasksSameDates(Task1, Task2)){
			if (taskTimesOverlap(Task1, Task2)){
				isClash = true;
			}
		}
	}

	//Both tasks have no date 1 time
	else if (numOfTask1Dates == 0 && numOfTask2Dates == 0 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (task1StartTime == task2StartTime){
			isClash = true;
		}
	}

	//Both tasks have no date 2 times
	else if (numOfTask1Dates == 0 && numOfTask2Dates == 0 && numOfTask1Times == 2 && numOfTask2Times == 2){
		if (taskTimesOverlap(Task1, Task2)){
			isClash = true;
		}
	}

	//Task1 has 1 date 1 time and Task2 has 2 dates, 1 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 2 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isOneDateTaskbetweenTwoDateTask(Task1, Task2)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//opposite of above: Task1 has 2 dates 1 time, task2 has 1 date and 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 1 && numOfTask1Times == 1 && numOfTask2Times == 1){
		if (isOneDateTaskbetweenTwoDateTask(Task2, Task1)){
			if (task1StartTime == task2StartTime){
				isClash = true;
			}
		}
	}

	//Task1 has 1 date 1 time and Task2 has 2 dates, 2 time
	else if (numOfTask1Dates == 1 && numOfTask2Dates == 2 && numOfTask1Times == 1 && numOfTask2Times == 2){
		isClash = isClashTaskSingleDateTimeTaskDoubleDateTime(Task1, Task2);
	}

	//opp of above: Task1 has 2 dates 2 times, task2 has 1 date 1 time
	else if (numOfTask1Dates == 2 && numOfTask2Dates == 1 && numOfTask1Times == 2 && numOfTask2Times == 1){
		isClash = isClashTaskSingleDateTimeTaskDoubleDateTime(Task2, Task1);
	}

	return isClash;
}

	// End of segment: D:\Code\Planner4Life(Release)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life(Release)\Planner\Planner.cpp
	 */

bool Planner::isClashTaskSingleDateTimeTaskDoubleDateTime(Task Task1, Task Task2){
	bool isClash = false;

	if (isOneDateTaskbetweenTwoDateTask(Task1, Task2)){
		if (isOneTimeTaskBetweenTwoTimesTask(Task1, Task2)){
			isClash = true;
		}
	}

	return isClash;
}

	// End of segment: D:\Code\Planner4Life(Release)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life(Release)\Planner\Planner.cpp
	 */

bool Planner::isTwoDatesTasksSameDates(Task Task1, Task Task2){
	bool areEqual = false;

	if (Task1.getDateStart().year == Task2.getDateStart().year && Task1.getDateEnd().year == Task2.getDateEnd().year) {
		if (Task1.getDateStart().month == Task2.getDateStart().month && Task1.getDateEnd().month == Task2.getDateEnd().month) {
			if (Task1.getDateStart().day == Task2.getDateStart().day && Task1.getDateEnd().day == Task2.getDateEnd().day){
				areEqual = true;
			}
		}
	}
	return areEqual;
}

	// End of segment: D:\Code\Planner4Life(Release)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life(Release)\Planner\Planner.cpp
	 */

bool Planner::isOneDateTasksSameDates(Task Task1, Task Task2){
	bool dateIsEqual = false;

	if (Task1.getDateEnd().year == Task2.getDateEnd().year) {
		if (Task1.getDateEnd().month == Task2.getDateEnd().month) {
			if (Task1.getDateEnd().day == Task2.getDateEnd().day) {
				dateIsEqual = true;
			}
		}
	}

	return dateIsEqual;
}

	// End of segment: D:\Code\Planner4Life(Release)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life(Release)\Planner\Planner.cpp
	 */

bool Planner::isOneTimeTaskBetweenTwoTimesTask(Task Task1, Task Task2){
	int task1StartTime, task2StartTime, task2EndTime;
	bool isInBetween = false;

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();
	task2EndTime = Task2.getTimeEnd();

	if (task1StartTime < task2EndTime && task1StartTime >= task2StartTime){
		isInBetween = true;
	}
	return isInBetween;
}

	// End of segment: D:\Code\Planner4Life(Release)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life(Release)\Planner\Planner.cpp
	 */

bool Planner::taskTimesOverlap(Task Task1, Task Task2){
	int task1StartTime, task2StartTime, task1EndTime, task2EndTime;
	bool isOverlap = false;

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();
	task1EndTime = Task1.getTimeEnd();
	task2EndTime = Task2.getTimeEnd();

	if ((task1EndTime > task2StartTime && task1StartTime <= task2StartTime) || (task1StartTime < task2EndTime && task1EndTime >= task2EndTime)){
		isOverlap = true;
	}
	return isOverlap;
}

	// End of segment: D:\Code\Planner4Life(Release)\Planner\Planner.cpp





	/**
	 * origin: D:\Code\Planner4Life(Release)\Planner\Planner.cpp
	 */

bool Planner::isOneDateTaskbetweenTwoDateTask(Task Task1, Task Task2){
	bool isInBetween = false;
	taskDate task1StartDate, task1EndDate, task2StartDate, task2EndDate;
	int task1StartTime, task1EndTime, task2StartTime, task2EndTime;

	task1StartDate = Task1.getDateStart();
	task1EndDate = Task1.getDateEnd();
	task1StartTime = Task1.getTimeStart();
	task1EndTime = Task1.getTimeEnd();

	task2StartDate = Task2.getDateStart();
	task2EndDate = Task2.getDateEnd();
	task2StartTime = Task2.getTimeStart();
	task2EndTime = Task2.getTimeEnd();

	if (task1EndDate.year <= task2EndDate.year && task1EndDate.year >= task2StartDate.year) {
		if (task1EndDate.month <= task2EndDate.month && task1EndDate.month >= task2StartDate.month) {
			if (task1EndDate.day <= task2EndDate.day && task1EndDate.day >= task2StartDate.day) {
				isInBetween = true;
			}
		}
	}

	return isInBetween;
}

	// End of segment: D:\Code\Planner4Life(Release)\Planner\Planner.cpp





