//@author: a0111061e



	/**
	 * origin: D:\Code\Log.cpp
	 */

void Log::saveLog(string text){
	ofstream outFile;

	if (numOfLinesInFile() > MAX_LINES){
		clearLogFile();
	}

	_numLines = numOfLinesInFile();
	_numLines++;

	outFile.open(DEFAULT_LOGFILE_LOCATION, std::ios::app);
	outFile << _numLines << ". " << text;

	outFile.close();
}

int Log::numOfLinesInFile(){
	int numOfLines = 0;
	string line;
	ifstream readFile(DEFAULT_LOGFILE_LOCATION);

	while (getline(readFile, line)){
		numOfLines++;
	}

	return numOfLines;
}
	// End of segment: D:\Code\Log.cpp





	/**
	 * origin: D:\Code\Planner.cpp
	 */

//checks if 2 tasks are clashing
bool Planner::checkTaskForClashes(Task Task1, Task Task2){
	bool isClash = false;
	int numOfTask1Times, numOfTask2Times, numOfTask1Dates, numOfTask2Dates, task1StartTime, task2StartTime;

	numOfTask1Times = Task1.getNumOfTimes();
	numOfTask2Times = Task2.getNumOfTimes();
	numOfTask1Dates = Task1.getNumOfDates();
	numOfTask2Dates = Task2.getNumOfDates();

	task1StartTime = Task1.getTimeStart();
	task2StartTime = Task2.getTimeStart();


	//Floating tasks and tasks with no times specified, Assume no clash
	if (numOfTask1Times == 0 || numOfTask2Times == 0){
		isClash = false;
	}

	//No date specified, assumed no clash.
	else if (numOfTask1Dates == 0 && numOfTask2Dates == 0){
		isClash = false;
	}

	else if (isDatesClash(Task1, Task2)){
		if (isTimesClash(Task1, Task2)){
			isClash = true;
		}
	}

	return isClash;


}

//returns true if tasks with 1 dates have the same dates
bool Planner::isOneDateTasksSameDates(Task Task1, Task Task2){
	bool dateIsEqual = false;

	if (Task1.getDateEnd().year == Task2.getDateEnd().year) {
		if (Task1.getDateEnd().month == Task2.getDateEnd().month) {
			if (Task1.getDateEnd().day == Task2.getDateEnd().day) {
				dateIsEqual = true;
			}
		}
	}

	return dateIsEqual;
}

//returns true if dates clash
bool Planner::isDatesClash(Task Task1, Task Task2){
	int numOfTask1Dates, numOfTask2Dates;
	bool isClash = false;

	numOfTask1Dates = Task1.getNumOfDates();
	numOfTask2Dates = Task2.getNumOfDates();

	if (numOfTask1Dates == 1 && numOfTask2Dates == 1){
		if (isOneDateTasksSameDates(Task1, Task2)){
			isClash = true;
		}
	}

	else if (numOfTask1Dates == 1 && numOfTask2Dates == 2){
		if (isOneDateTaskbetweenTwoDateTask(Task1, Task2)){
			isClash = true;
		}
	}

	else if (numOfTask1Dates == 2 && numOfTask2Dates == 1){
		if (isOneDateTaskbetweenTwoDateTask(Task2, Task1)){
			isClash = true;
		}
	}

	else if (numOfTask1Dates == 2 && numOfTask2Dates == 2){
		if (isTwoDateTasksOverlapping(Task1, Task2)){
			isClash = true;
		}
	}

	return isClash;
}

//returns true if both tasks have two dates and the dates overlap in some way
bool Planner::isTwoDateTasksOverlapping(Task Task1, Task Task2){
	bool isClash = false;
	taskDate task1StartDate, task1EndDate, task2StartDate, task2EndDate;

	task1StartDate = Task1.getDateStart();
	task1EndDate = Task1.getDateEnd();
	task2StartDate = Task2.getDateStart();
	task2EndDate = Task2.getDateEnd();

	if (isTwoDatesTasksSameDates(Task1, Task2)){
		isClash = true;
	}
	else if (task1EndDateOverlapTask2StartDate(task1StartDate, task1EndDate, task2StartDate, task2EndDate) || task2EndDateOverlapTask1StartDate(task1StartDate, task1EndDate, task2StartDate, task2EndDate)){
		isClash = true;
	}

	return isClash;
}

//returns true if the end date of task 2 is after the start date of task 1
bool Planner::task2EndDateOverlapTask1StartDate(taskDate task1StartDate, taskDate task1EndDate, taskDate task2StartDate, taskDate task2EndDate){
	bool isOverlap = false;

	if (isTask1EndAfterTask2Start(task2EndDate, task1StartDate) && isTask1StartBeforeOrSameAsTask2Start(task2EndDate, task1EndDate)){
		isOverlap = true;
	}

	return isOverlap;
}

//returns true if end date of task one is after start date of task 2
bool Planner::task1EndDateOverlapTask2StartDate(taskDate task1StartDate, taskDate task1EndDate, taskDate task2StartDate, taskDate task2EndDate){
	bool isOverlap = false;

	if (isTask1EndAfterTask2Start(task1EndDate, task2StartDate) && isTask1StartBeforeOrSameAsTask2Start(task1StartDate, task2StartDate)){
		isOverlap = true;
	}

	return isOverlap;
}

//returns true if task 1 end date is after task 2 start date
bool Planner::isTask1EndAfterTask2Start(taskDate task1EndDate, taskDate task2StartDate){
	bool isAfter = false;

	if (task2StartDate.year < task1EndDate.year) {
		isAfter = true;
	}

	else if (task2StartDate.year == task1EndDate.year) {
		if (task2StartDate.month < task1EndDate.month) {
			isAfter = true;
		}
	}

	else if (task2StartDate.month == task1EndDate.month) {
		if (task2StartDate.day < task1EndDate.day) {
			isAfter = true;
		}
	}

	return isAfter;
}

//returns true if task1 start date is sane as or before the start date of task 2
bool Planner::isTask1StartBeforeOrSameAsTask2Start(taskDate task1StartDate, taskDate task2StartDate){
	bool isBefore = false;

	if (task1StartDate.year <= task2StartDate.year) {
		isBefore = true;
	}

	else if (task1StartDate.year == task2StartDate.year) {
		if (task1StartDate.month <= task2StartDate.month) {
			isBefore = true;
		}
	}

	else if (task1StartDate.month == task2StartDate.month) {
		if (task1StartDate.day <= task2StartDate.day) {
			isBefore = true;
		}
	}

	return isBefore;
}

//returns true if 2 date tasks, both dates are same
bool Planner::isTwoDatesTasksSameDates(Task Task1, Task Task2){
	bool isEqual = false;

	if (Task1.getDateStart().year == Task2.getDateStart().year && Task1.getDateEnd().year == Task2.getDateEnd().year) {
		if (Task1.getDateStart().month == Task2.getDateStart().month && Task1.getDateEnd().month == Task2.getDateEnd().month) {
			if (Task1.getDateStart().day == Task2.getDateStart().day && Task1.getDateEnd().day == Task2.getDateEnd().day){
				isEqual = true;
			}
		}
	}
	return isEqual;
}

//returns true if times clash
bool Planner::isTimesClash(Task Task1, Task Task2){
	int task1StartTime, task1EndTime, task1NumOfTimes, task2StartTime, task2EndTime, task2NumOfTimes;
	bool isClash = false;

	task1StartTime = Task1.getTimeStart();
	task1EndTime = Task1.getTimeEnd();
	task1NumOfTimes = Task1.getNumOfTimes();
	task2StartTime = Task2.getTimeStart();
	task2EndTime = Task2.getTimeEnd();
	task2NumOfTimes = Task2.getNumOfTimes();

	if (task1NumOfTimes == 1 && task2NumOfTimes == 1){
		if (task1StartTime == task2StartTime){
			isClash = true;
		}
	}

	if (task1NumOfTimes == 1 && task2NumOfTimes == 2){
		if (task1StartTime >= task2StartTime && task1StartTime < task2EndTime){
			isClash = true;
		}
	}

	if (task1NumOfTimes == 2 && task2NumOfTimes == 1){
		if (task2StartTime >= task1StartTime && task2StartTime < task1EndTime){
			isClash = true;
		}
	}

	if (task1NumOfTimes == 2 && task2NumOfTimes == 2){
		if ((task1EndTime > task2StartTime && task1StartTime <= task2StartTime) || (task1StartTime < task2EndTime && task1EndTime >= task2EndTime)){
			isClash = true;
		}
	}

	return isClash;
}

//returns true if task 1 date is inbetween task 2 date range
bool Planner::isOneDateTaskbetweenTwoDateTask(Task Task1, Task Task2){
	bool isInBetween = false;
	taskDate task1StartDate, task1EndDate, task2StartDate, task2EndDate;

	task1StartDate = Task1.getDateStart();
	task1EndDate = Task1.getDateEnd();
	task2StartDate = Task2.getDateStart();
	task2EndDate = Task2.getDateEnd();

	if (task1EndDate.year <= task2EndDate.year && task1EndDate.year >= task2StartDate.year) {
		if (task1EndDate.month <= task2EndDate.month && task1EndDate.month >= task2StartDate.month) {
			if (task1EndDate.day <= task2EndDate.day && task1EndDate.day >= task2StartDate.day) {
				isInBetween = true;
			}
		}
	}

	return isInBetween;
}

/************************************************************************************************

Status Returning functions

************************************************************************************************/
//Private Functions

	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Planner.cpp
	 */

bool Planner::isOneTimeTaskBetweenTwoTimesTask(Task Task1, Task Task2){
int task1StartTime, task2StartTime, task2EndTime;
bool isInBetween = false;

task1StartTime = Task1.getTimeStart();
task2StartTime = Task2.getTimeStart();
task2EndTime = Task2.getTimeEnd();

if (task1StartTime < task2EndTime && task1StartTime >= task2StartTime){
isInBetween = true;
}
return isInBetween;
}

	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Planner.cpp
	 */

bool Planner::isClashTaskSingleDateTimeTaskDoubleDateTime(Task Task1, Task Task2){
bool isClash = false;

if (isOneDateTaskbetweenTwoDateTask(Task1, Task2)){
if (isOneTimeTaskBetweenTwoTimesTask(Task1, Task2)){
isClash = true;
}
}

return isClash;
}		*/
	// End of segment: D:\Code\Planner.cpp





	/**
	 * origin: D:\Code\Task.cpp
	 */

//Function takes in user input and stores the task details
void Task::addDetails(string details){
	int noOfDelimiters;

	processImportance(details);

	noOfDelimiters = count(details.begin(), details.end(), ',');
	switch (noOfDelimiters){
	case 0:
		process_NoDelimiter(details);
		assert(_dateEnd.day == -1);
		assert(_dateStart.day == -1);
		assert(_timeStart == -1);
		assert(_timeEnd == -1);
		break;
	case 1:
		process_OneDelimiter(details);
		break;
	case 2:
		process_TwoDelimiter(details);
		assert(_dateEnd.day != -1);
		assert(_dateStart.day != -1);
		break;
	default:
		throw exception(ERROR_MESSAGE_INVALID_INPUT);
	}
	
	// LogData->addLog(LOG_FILE_UPDATE_KEY_WORD, ADD_DETAILS_SUCCESSFUL);
}

//For the case when there is only description and no other information fields; stores the task details
void Task::process_NoDelimiter(string details) {
	_description = details;
}

//For the case when there is description and one other info field (either date or time) separated by a delimiter; stores the task details
void Task::process_OneDelimiter(string details) {
	processDescription(details);
	try{
		if (details.find(" date") != string::npos){
			processDate(details);
		}
		else if (details.find(" time") != string::npos){
			processTime(details);
		}
		else {
			throw exception(ERROR_MESSAGE_INVALID_INPUT);
		}
	}
	catch (exception const& error){
		throw;
	}
	// LogData->addLog(LOG_FILE_UPDATE_KEY_WORD, PROCESS_ONE_DELIMITER_SUCCESSFUL);
}

//For the case when there is description and 2 other information fields (date and time) separated by delimiters; stores task details
void Task::process_TwoDelimiter(string details) {
	int commaPos;
	string durationInfo, dateInfo, timeInfo;

	processDescription(details);
	commaPos = details.find(',');
	durationInfo = details.substr(0, commaPos);

	try{
		if (durationInfo.find(" date") != string::npos){
			dateInfo = details.substr(0, commaPos);
		}
		else if (durationInfo.find(" time") != string::npos){
			timeInfo = details.substr(0, commaPos);
		}
		else {
			throw exception(ERROR_MESSAGE_INVALID_INPUT);
		}
	}
	catch (exception const& error){
		throw;
	}

	commaPos++;
	if (timeInfo.empty()){
		timeInfo = details.substr(commaPos, details.size() - commaPos);
	}
	else if (dateInfo.empty()){
		dateInfo = details.substr(commaPos, details.size() - commaPos);
	}
	processDate(dateInfo);
	processTime(timeInfo);

	// LogData->addLog(LOG_FILE_UPDATE_KEY_WORD, PROCESS_TWO_DELIMITER_SUCCESSFUL);
}

//Checks if task is important and returns the remainder of user input
void Task::processImportance(string& details){
	int hashPos;
	hashPos = details.find("#");
	if (hashPos != string::npos){
		_isImpt = true;
		details = details.substr(0, hashPos);
	}
}

//stores description into task object and returns the remainder of user input
void Task::processDescription(string& details){
	int descriptionEnd;

	descriptionEnd = details.find_first_of(",");
	_description = details.substr(0, descriptionEnd);
	descriptionEnd++;
	details = details.substr(descriptionEnd, details.size() - descriptionEnd);				//cut out the description part to be left with the date and/or time part
}

//Takes in date related information in a string and stores into the respective variables in Task object
void Task::processDate(string dateInfo){
	string keyword, startDate, endDate, separator;
	int separatorPos;
	istringstream in(dateInfo);

	separatorPos = dateInfo.find("to");			// locate the word to in string
	if (separatorPos != string::npos){
		in >> keyword;
		in >> startDate;
		in >> separator;
		in >> endDate;

		processTwoDates(startDate, endDate);
		// LogData->addLog(LOG_FILE_UPDATE_KEY_WORD, PROCESS_TWO_DATES_SUCCESSFUL);
	}
	else{
		in >> keyword;
		in >> endDate;

		processOneDate(endDate);
		// LogData->addLog(LOG_FILE_UPDATE_KEY_WORD, PROCESS_ONE_DATES_SUCCESSFUL);
	}
}

	// End of segment: D:\Code\Task.cpp





	/**
	 * origin: D:\Code\Task.cpp
	 */

//Splits the start date string into individual components and stores them in the relevant variables
void Task::storeStartDate(string dateStart){
	int day, month, year;
	splitDate(dateStart, day, month, year);

	_dateStart.day = day;
	_dateStart.month = month;
	_dateStart.year = year;
}

//Splits the end date string into individual components and stores them in the relevant variables
void Task::storeEndDate(string dateEnd){
	int day, month, year;
	splitDate(dateEnd, day, month, year);

	_dateEnd.day = day;
	_dateEnd.month = month;
	_dateEnd.year = year;
}


//Takes in time related information in a string and stores into the respective variables in Task object
void Task::processTime(string timeInfo){

	int separatorPos;
	string keyword, timeStart, timeEnd, separator;

	istringstream in(timeInfo);
	separatorPos = timeInfo.find("to");			// locate the word to in string

	if (separatorPos != string::npos){
		in >> keyword;
		in >> timeStart;
		in >> separator;
		in >> timeEnd;

		try{
			if (areValidTimes(timeStart, timeEnd)){
				storeStartTime(timeStart);
				storeEndTime(timeEnd);
				_numOfTimes = 2;
			}
			else {
				throw exception(ERROR_MESSAGE_INVALID_INPUT);
			}
		}
		catch (exception const& error){
			throw;
		}
	}
	else{
		in >> keyword;
		in >> timeStart;

		try{
			if (areValidTimes(timeStart, timeStart)){
				storeStartTime(timeStart);
				_numOfTimes = 1;
			}
			else {
				throw exception(ERROR_MESSAGE_INVALID_INPUT);
			}
		}
		catch (exception const& error){
			throw;
		}
	}
}

	// End of segment: D:\Code\Task.cpp





	/**
	 * origin: D:\Code\Task.cpp
	 */

//Stores a unique ID number that is created by the Planner class
void Task::storeIdNumber(int num){
	_idNumber = num;
}

//Marks a particular task as done
void Task::markIsDoneAsTrue(){
	_isDone = true;
}

/************************************************************************************************

								Task Information Getter Functions

************************************************************************************************/
//Return description of task
string Task::getDescription(){
	return _description;
}

//Return starting time 
int Task::getTimeStart(){
	return _timeStart;
}

//Return ending time
int Task::getTimeEnd(){
	return _timeEnd;
}

//Return start date
taskDate Task::getDateStart(){
	return _dateStart;
}

//Return end date
taskDate Task::getDateEnd(){
	return _dateEnd;
}

//Return if the task is marked as important
bool Task::getImportance(){
	return _isImpt;
}

//Return unique ID number of task
int Task::getIdNumber(){
	return _idNumber;
}

//Return the number of dates (0,1 or 2) the task has
int Task::getNumOfDates(){
	return _numOfDates;
}

//Return the number of times (0,1 or 2) the task has
int Task::getNumOfTimes(){
	return _numOfTimes;
}

//Return the list of recurring tasks
list<Task> Task::getRecurringTasks(){
	return _recurringTasks;
}

	// End of segment: D:\Code\Task.cpp





	/**
	 * origin: D:\Code\Task.cpp
	 */

//Function takes in string, identifies the frequency and the number of recurrence and processed the task
//Recurred tasks are stored in the _recurringTasks list. 
void Task::recurTask(string details){
	string frequency;
	int numOfRecurrence;

	istringstream in(details);
	in >> frequency;						//daily, weekly, monthly or yearly
	in >> numOfRecurrence;					//no of times to recur

	try{
		if (numOfRecurrence <= 30){

		}
		else {
			throw exception(ERROR_MESSAGE_RECUR_MAX_LIMIT_REACHED);
		}
	}
	catch (exception const& error){
		throw;
	}

	details = extractTaskDetailsFromUserInput(details);

	processRecur(details, frequency, numOfRecurrence);

	// LogData->addLog(UPDATE, RECUR_TASK_ADD_SUCCESSFUL);
}

//Extracts the relevent details from task
string Task::extractTaskDetailsFromUserInput(string details){
	int commaPos;
	string taskDetails;

	commaPos = details.find_first_of(",");

	try{
		if (commaPos == string::npos){
			throw exception(ERROR_MESSAGE_INVALID_INPUT);
		}
	}
	catch (exception const& error){
		throw;
	}

	commaPos++;

	taskDetails = details.substr(commaPos, details.size() - commaPos);

	return taskDetails;
}

//Function creates new tasks and pushes into list
//each task has the updated dates
void Task::processRecur(string details, string frequency, int numOfRecurrence){
	Task *recTaskPtr;

	for (int i = 1; i <= numOfRecurrence; i++){
		recTaskPtr = new Task;
		(*recTaskPtr).addDetails(details);
		_recurringTasks.push_back(*recTaskPtr);

		details = modifyDetails(frequency, details);	//update the date by the required number of days/weeks etc for the next entry in recurring series
		
		delete recTaskPtr;
		recTaskPtr = NULL;
	}
}

//modifies the dates of the task according to frequency
string Task::modifyDetails(string frequency, string details){
	int numOfDates;
	string keyword, startDate, endDate, separator, newDateInfo;
	ostringstream updatedInfo;

	numOfDates = extractDateInfoFields(details, keyword, startDate, endDate, separator);

	switch (numOfDates){
	case 1:
		endDate = modifyDate(endDate, frequency);

		updatedInfo << " ";
		updatedInfo << keyword;
		updatedInfo << " ";
		updatedInfo << endDate;

		newDateInfo = updatedInfo.str();
		details = insertNewDateInfo(details, newDateInfo);
		break;

	case 2:
		startDate = modifyDate(startDate, frequency);
		endDate = modifyDate(endDate, frequency);

		updatedInfo << " ";
		updatedInfo << keyword;
		updatedInfo << " ";
		updatedInfo << startDate;
		updatedInfo << " ";
		updatedInfo << separator;
		updatedInfo << " " << endDate;

		newDateInfo = updatedInfo.str();
		details = insertNewDateInfo(details, newDateInfo);
		break;
	default:
		throw exception(ERROR_MESSAGE_INVALID_INPUT);
	}

	return details;
}

//Function extracts the relevant date info fields for updating purposes
int Task::extractDateInfoFields(string details, string& keyword, string& startDate, string& endDate, string& separator){
	int numOfDates, index;
	string dateInfo;

	dateInfo = extractDateInfo(details);

	istringstream in(dateInfo);
	index = dateInfo.find("to");			// locate the word 'to' in string

	if (index != string::npos){
		in >> keyword;
		in >> startDate;
		in >> separator;
		in >> endDate;
		numOfDates = 2;
	}
	else{
		in >> keyword;
		in >> endDate;
		storeEndDate(endDate);
		numOfDates = 1;
	}

	return numOfDates;
}

//extracts out date inforation field for processing purposes
string Task::extractDateInfo(string details){
	int datePos, hashPos, commaPos;

	datePos = details.find("date");

	try{
		if (datePos == string::npos){
			throw exception(ERROR_MESSAGE_INVALID_INPUT);
		}
	}
	catch (exception const& error){
		throw;
	}

	details = details.substr(datePos, details.size() - datePos);

	//get rid of #impt if exists
	hashPos = details.find("#");
	if (hashPos != string::npos){
		details = details.substr(0, hashPos);
	}

	//get rid of time if exists
	commaPos = details.find_first_of(",");			//find first delimiter
	details = details.substr(0, commaPos);

	return details;
}

//inserts the updated date information into the task
string Task::insertNewDateInfo(string details, string newDate){
	int indexDateInfoStart, indexDateInfoEnd;
	indexDateInfoStart = details.find_first_of(",");
	indexDateInfoStart++;
	indexDateInfoEnd = details.find_first_of(",", indexDateInfoStart);
	if (indexDateInfoEnd == string::npos){
		indexDateInfoEnd = details.find_first_of("#");
	}
	details.replace(indexDateInfoStart, indexDateInfoEnd - indexDateInfoStart, "");		//deleting old date info
	details.insert(indexDateInfoStart, newDate);

	return details;
}

//updates the date according to frequency
string Task::modifyDate(string date, string frequency){
	string newDate;

	if (frequency == "daily" || frequency == "Daily"){
		newDate = processDailyRecur(date);
	}
	else if (frequency == "weekly" || frequency == "Weekly"){
		newDate = processWeeklyRecur(date);
	}
	else if (frequency == "monthly" || frequency == "Monthly"){
		newDate = processMonthlyRecur(date);
	}
	else if (frequency == "yearly" || frequency == "Yearly"){
		newDate = processYearlyRecur(date);
	}

	return newDate;
}

//updates the date when the recur is daily.
string Task::processDailyRecur(string date){
	int day, month, year;
	splitDate(date, day, month, year);

	if (month == 2){						//case when it is Feb 28th
		if (day == 28){
			day = 1;
			month++;
		}
	}
	else if (is31DayMonth(month)){
		if (day == 31){						//case when it is
			if (month == 12){				//31st Dec
				day = 1;
				month = 1;
				year++;
			}
			else{							//case when it is 31st but not Dec
				day = 1;
				month++;
			}
		}
		else{								//case when it is month with 31 days and it is any day from 1-30
			day++;
		}
	}
	else{
		if (day == 30){						//case when it is month with 30 days and day is 30th
			day = 1;
			month++;
		}
		else{								//case when it is month with 30 days and day is 1-29
			day++;
		}
	}

	mergeDate(date, day, month, year);
	return date;
}

//updates the date when the recur is weekly
string Task::processWeeklyRecur(string date){

	for (int i = 1; i <= 7; i++){				//since each week is 7 days, just loop processDailyRecur 7 times
		date = processDailyRecur(date);
	}

	return date;
}

//updates the date when the recur is monthly
string Task::processMonthlyRecur(string date){
	int day, month, year;
	splitDate(date, day, month, year);

	if (month == 12){
		month = 1;
		year++;
	}
	else{
		month++;
	}

	mergeDate(date, day, month, year);

	return date;
}

//updates the date when the recur is yearly
string Task::processYearlyRecur(string date){
	int day, month, year;
	splitDate(date, day, month, year);

	try{
		if (year + 1 < 100){			//to ensure year is a 2 digit number
			year++;
		}
		else{
			throw exception(ERROR_MESSAGE_RECUR_NO_YEAR_EXCEED_LIMIT);
		}
	}
	catch (exception const& error){
		throw;
	}

	mergeDate(date, day, month, year);

	return date;
}

//function that splits the date string to separate fields
void Task::splitDate(string endDate, int& day, int& month, int& year){
	try {
		day = stoi(endDate.substr(0, 2));
		month = stoi(endDate.substr(2, 2));
		year = stoi(endDate.substr(4, 2));
	}
	catch (invalid_argument& error){
		throw exception(ERROR_MESSAGE_INVALID_INPUT);
	}
}

//function merges the separate fields into a date
void Task::mergeDate(string& date, int day, int month, int year){
	ostringstream mergedDate;
	if (day < 10){
		mergedDate << "0" << day;
	}
	else{
		mergedDate << day;
	}

	if (month < 10){
		mergedDate << "0" << month;
	}
	else{
		mergedDate << month;
	}

	if (year < 10){
		mergedDate << "0" << year;
	}
	else{
		mergedDate << year;
	}

	date = mergedDate.str();
}

	// End of segment: D:\Code\Task.cpp





	/**
	 * origin: D:\Code\Task.cpp
	 */

//returns true if a month has 31 days. used for updating dates in recur.
bool Task::is31DayMonth(int month){
	bool is31DayMonth = false;

	if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){
		is31DayMonth = true;
	}

	return is31DayMonth;
}

//Checks if the target word is present in the task description
bool Task::isSearchTargetPresent(string target){
	bool isFound = true;
	string targetWithUpperCase = target, targetWithLowerCase = target;
	targetWithUpperCase[0] = toupper(targetWithUpperCase[0]);
	targetWithLowerCase[0] = tolower(targetWithLowerCase[0]);

	if ((_description.find(target) == string::npos) &&
		(_description.find(targetWithUpperCase) == string::npos) &&		////for search to include the target with first letter in upper case
		(_description.find(targetWithLowerCase) == string::npos)){		//for search to include the target with first letter in lower case
		isFound = false;
	}

	// LogData->addLog(LOG_FILE_UPDATE_KEY_WORD, SEARCH_TARGET_SUCCESSFUL);
	return isFound;
}
	// End of segment: D:\Code\Task.cpp





	/**
	 * origin: D:\Code\TaskPositiveUnitTest.cpp
	 */

		TEST_METHOD(testSearchTarget_targetPresent){
			Task testTask;
			string searchTarget = "meeting";

			testTask.addDetails("Meeting with Prof, date 270315, time 1400");

			Assert::IsTrue(testTask.isSearchTargetPresent(searchTarget));
		}

		TEST_METHOD(testSearchTarget_targetNotPresent){
			Task testTask;
			string searchTarget = "class";

			testTask.addDetails("Meeting with Prof, date 270315, time 1400");

			Assert::IsFalse(testTask.isSearchTargetPresent(searchTarget));
		}

		/************************************************************************************************

		Recur Unit Tests

		************************************************************************************************/
		TEST_METHOD(testRecurTask_numOfTimesRecurred){
			Task testTask;
			int numOfTimesRecurred;

			testTask.recurTask("daily 5, Project meeting, date 250415, time 1500");
			numOfTimesRecurred = testTask.getRecurringTasks().size();

			Assert::AreEqual(5, numOfTimesRecurred);
		}

		//To test if the recurring tasks dates are updated. Recurring 5 times is chosen arbitrarily.
		//Date is specifically chosen to spill from one month to another for daily, one month to another for weekly, 
		//one year to another for monthly, to test the date changing logic
		//***** Daily Tests ******//
		TEST_METHOD(testRecurTask_Daily_RecurredFiveTimes_Date_Day){ 
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskDay;
			list<Task> taskList;

			testTask.recurTask("daily 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskDay = (*taskIter).getDateEnd().day;
			Assert::AreEqual(2, fifthRecurredTaskDay);
		}

		TEST_METHOD(testRecurTask_Daily_RecurredFiveTimes_Date_Month){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskMonth;
			list<Task> taskList;

			testTask.recurTask("daily 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskMonth = (*taskIter).getDateEnd().month;
			Assert::AreEqual(12, fifthRecurredTaskMonth);
		}
		
		TEST_METHOD(testRecurTask_Daily_RecurredFiveTimes_Date_Year){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskYear;
			list<Task> taskList;

			testTask.recurTask("daily 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskYear = (*taskIter).getDateEnd().year;
			Assert::AreEqual(15, fifthRecurredTaskYear);
		}

		//***** Monthly Tests ******//
		TEST_METHOD(testRecurTask_Monthly_RecurredFiveTimes_Date_Day){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskDay;
			list<Task> taskList;

			testTask.recurTask("monthly 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskDay = (*taskIter).getDateEnd().day;
			Assert::AreEqual(28, fifthRecurredTaskDay);
		}

		TEST_METHOD(testRecurTask_Monthly_RecurredFiveTimes_Date_Month){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskMonth;
			list<Task> taskList;

			testTask.recurTask("monthly 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskMonth = (*taskIter).getDateEnd().month;
			Assert::AreEqual(3, fifthRecurredTaskMonth);
		}

		TEST_METHOD(testRecurTask_Monthly_RecurredFiveTimes_Date_Year){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskYear;
			list<Task> taskList;

			testTask.recurTask("monthly 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskYear = (*taskIter).getDateEnd().year;
			Assert::AreEqual(16, fifthRecurredTaskYear);
		}

		//***** Weekly Tests ******//
		TEST_METHOD(testRecurTask_Weekly_RecurredFiveTimes_Date_Day){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskDay;
			list<Task> taskList;

			testTask.recurTask("weekly 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskDay = (*taskIter).getDateEnd().day;
			Assert::AreEqual(26, fifthRecurredTaskDay);
		}

		TEST_METHOD(testRecurTask_Weekly_RecurredFiveTimes_Date_Month){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskMonth;
			list<Task> taskList;

			testTask.recurTask("weekly 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskMonth = (*taskIter).getDateEnd().month;
			Assert::AreEqual(12, fifthRecurredTaskMonth);
		}

		TEST_METHOD(testRecurTask_Weekly_RecurredFiveTimes_Date_Year){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskYear;
			list<Task> taskList;

			testTask.recurTask("weekly 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskYear = (*taskIter).getDateEnd().year;
			Assert::AreEqual(15, fifthRecurredTaskYear);
		}

		//***** Yearly Tests ******//
		TEST_METHOD(testRecurTask_Yearly_RecurredFiveTimes_Date_Day){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskDay;
			list<Task> taskList;

			testTask.recurTask("yearly 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskDay = (*taskIter).getDateEnd().day;
			Assert::AreEqual(28, fifthRecurredTaskDay);
		}

		TEST_METHOD(testRecurTask_Yearly_RecurredFiveTimes_Date_Month){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskMonth;
			list<Task> taskList;

			testTask.recurTask("yearly 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskMonth = (*taskIter).getDateEnd().month;
			Assert::AreEqual(11, fifthRecurredTaskMonth);
		}

		TEST_METHOD(testRecurTask_Yearly_RecurredFiveTimes_Date_Year){
			Task testTask;
			taskDate updatedDateOfLastEntry;
			int fifthRecurredTaskYear;
			list<Task> taskList;

			testTask.recurTask("yearly 5, Project meeting, date 281115, time 1500");
			list<Task>::iterator taskIter;
			taskList = testTask.getRecurringTasks();
			taskIter = taskList.end();
			taskIter--;
			fifthRecurredTaskYear = (*taskIter).getDateEnd().year;
			Assert::AreEqual(19, fifthRecurredTaskYear);
		}
	};
}

	// End of segment: D:\Code\TaskPositiveUnitTest.cpp





